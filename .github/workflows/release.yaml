name: Create Release

on:
  push:
    branches:
      - main
    paths:
      - pyproject.toml

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check.outputs.changed }}
      new-version: ${{ steps.check.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if version changed
        id: check
        run: |
          # Get current version from pyproject.toml
          CURRENT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "Current version: $CURRENT_VERSION"
          
          # Get previous version from the previous commit
          git checkout HEAD~1 -- pyproject.toml 2>/dev/null || true
          if [ -f pyproject.toml ]; then
            PREVIOUS_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          else
            PREVIOUS_VERSION=""
          fi
          echo "Previous version: $PREVIOUS_VERSION"
          
          # Restore current pyproject.toml
          git checkout HEAD -- pyproject.toml
          
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ] && [ -n "$CURRENT_VERSION" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "Version unchanged"
          fi

  create-release:
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: uv.lock

      - name: Build package
        run: uv build

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-version.outputs.new-version }}
          release_name: Release v${{ needs.check-version.outputs.new-version }}
          body: |
            ## Changes in v${{ needs.check-version.outputs.new-version }}
            
            This release was automatically created when the version in pyproject.toml was updated.
            
            ### Installation
            ```bash
            pip install baynext-cli==${{ needs.check-version.outputs.new-version }}
            ```
            
            See the [changelog](CHANGELOG.md) for detailed changes.
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/baynext_cli-${{ needs.check-version.outputs.new-version }}-py3-none-any.whl
          asset_name: baynext_cli-${{ needs.check-version.outputs.new-version }}-py3-none-any.whl
          asset_content_type: application/zip

      - name: Upload Source Distribution
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/baynext-cli-${{ needs.check-version.outputs.new-version }.tar.gz
          asset_name: baynext-cli-${{ needs.check-version.outputs.new-version }.tar.gz
          asset_content_type: application/gzip